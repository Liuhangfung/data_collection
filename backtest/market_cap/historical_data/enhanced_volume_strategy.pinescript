// Â© Enhanced Volume Strategy Pro
// Advanced Volume Profile Strategy with Trend Awareness and Risk Management
// Converted from Python strategy for TradingView visualization and backtesting

//@version=6
strategy("Enhanced Volume Strategy Pro", "EVS Pro", overlay=true, initial_capital=100000, default_qty_type=strategy.percent_of_equity, commission_type=strategy.commission.percent, commission_value=0.1)

//---------------------------------------------------------------------------------//
//                            STRATEGY SETTINGS                                    //
//---------------------------------------------------------------------------------//

// === Core Strategy Parameters ===
var g_strategy = "=== Strategy Parameters ==="
maxPositionSize = input.float(0.10, "Max Position Size", minval=0.01, maxval=0.50, step=0.01, group=g_strategy, tooltip="Maximum position size as % of equity")
stopLossPercent = input.float(0.05, "Stop Loss %", minval=0.01, maxval=0.20, step=0.01, group=g_strategy, tooltip="Stop loss percentage")
takeProfitPercent = input.float(0.15, "Take Profit %", minval=0.05, maxval=0.50, step=0.01, group=g_strategy, tooltip="Take profit percentage")

// === Volume Profile Settings ===
var g_profile = "=== Volume Profile ==="
profileLookback = input.int(200, "Profile Lookback", minval=50, maxval=500, group=g_profile)
profileRows = input.int(25, "Profile Rows", minval=15, maxval=50, group=g_profile)
showVolumeProfile = input.bool(true, "Show Volume Profile", group=g_profile)
showSmartLevels = input.bool(true, "Show Smart Levels", group=g_profile)

// === Signal Settings ===
var g_signals = "=== Signal Configuration ==="
volumeThreshold = input.float(2.5, "Volume Breakout Threshold", minval=1.5, maxval=5.0, step=0.1, group=g_signals)
trendStrengthThreshold = input.float(0.02, "Trend Strength Threshold", minval=0.01, maxval=0.05, step=0.005, group=g_signals)
rsiOversold = input.int(30, "RSI Oversold", minval=20, maxval=40, group=g_signals)
rsiOverbought = input.int(70, "RSI Overbought", minval=60, maxval=80, group=g_signals)

// === Visual Settings ===
var g_visual = "=== Visual Settings ==="
showSignals = input.bool(true, "Show Entry/Exit Signals", group=g_visual)
showRiskLevels = input.bool(true, "Show Risk Management Levels", group=g_visual)
showDashboard = input.bool(true, "Show Performance Dashboard", group=g_visual)

//---------------------------------------------------------------------------------//
//                            TECHNICAL INDICATORS                                 //
//---------------------------------------------------------------------------------//

// Trend Indicators
sma20 = ta.sma(close, 20)
sma50 = ta.sma(close, 50)
ema12 = ta.ema(close, 12)
ema26 = ta.ema(close, 26)
macd = ema12 - ema26
macdSignal = ta.ema(macd, 9)
rsi = ta.rsi(close, 14)

// Volume Indicators
volumeSMA = ta.sma(volume, 20)
volumeRatio = volume / volumeSMA
volumeRSI = ta.rsi(volume, 14)

// Enhanced Volume Calculations
moneyFlow = volume * hl2
enhancedMoneyFlow = moneyFlow * (1 + math.abs(ta.change(close) / close))

// Volume Pressure
buyingPressure = close > open ? volume : 0
sellingPressure = close < open ? volume : 0
volumeDelta = buyingPressure - sellingPressure
cumulativeDelta = ta.cum(volumeDelta)

// Institutional Flow Detection
institutionalThreshold = volumeSMA * 3
institutionalFlow = volume > institutionalThreshold ? volume : 0

// Market Regime Detection
trendStrength = (close - sma50) / sma50
isUptrend = sma20 > sma50 and close > sma20
isDowntrend = sma20 < sma50 and close < sma20
isRanging = not isUptrend and not isDowntrend

// Price and Volume Momentum
priceMomentum = ta.sma(ta.change(close, 5), 5) / close
volumeMomentum = ta.sma(ta.change(volume, 5), 5) / volumeSMA

//---------------------------------------------------------------------------------//
//                            VOLUME PROFILE CALCULATION                           //
//---------------------------------------------------------------------------------//

var profileVolume = array.new<float>()
var profilePrices = array.new<float>()
var float pocPrice = na
var float vaHigh = na
var float vaLow = na

// Calculate profile range variables outside condition
profileHigh = ta.highest(high, profileLookback)
profileLow = ta.lowest(low, profileLookback)
rowHeight = (profileHigh - profileLow) / profileRows

if barstate.islast and showVolumeProfile
    
    // Clear arrays
    array.clear(profileVolume)
    array.clear(profilePrices)
    
    if rowHeight > 0
        // Build volume profile
        for row = 0 to profileRows - 1
            rowBottom = profileLow + row * rowHeight
            rowTop = rowBottom + rowHeight
            rowCenter = (rowBottom + rowTop) / 2
            
            totalVol = 0.0
            for i = 0 to profileLookback - 1
                barHigh = high[i]
                barLow = low[i]
                barVol = volume[i]
                
                if barLow <= rowTop and barHigh >= rowBottom and barVol > 0
                    overlap = math.min(barHigh, rowTop) - math.max(barLow, rowBottom)
                    barRange = barHigh - barLow
                    if barRange > 0
                        volPortion = overlap / barRange * barVol
                        totalVol += volPortion
            
            array.push(profileVolume, totalVol)
            array.push(profilePrices, rowCenter)
    
    // Find POC (Point of Control)
    maxVol = array.max(profileVolume)
    pocIndex = array.indexof(profileVolume, maxVol)
    pocPrice := array.get(profilePrices, pocIndex)
    
    // Calculate Value Area (70% of volume)
    totalProfileVol = array.sum(profileVolume)
    targetVA = totalProfileVol * 0.70
    
    // Find value area boundaries
    vaVolume = maxVol
    vaTopIndex = pocIndex
    vaBottomIndex = pocIndex
    
    while vaVolume < targetVA and (vaTopIndex < profileRows - 1 or vaBottomIndex > 0)
        topVol = vaTopIndex < profileRows - 1 ? array.get(profileVolume, vaTopIndex + 1) : 0
        bottomVol = vaBottomIndex > 0 ? array.get(profileVolume, vaBottomIndex - 1) : 0
        
        if topVol >= bottomVol and vaTopIndex < profileRows - 1
            vaVolume += topVol
            vaTopIndex += 1
        else if vaBottomIndex > 0
            vaVolume += bottomVol
            vaBottomIndex -= 1
        else
            break
    
    vaHigh := array.get(profilePrices, vaTopIndex)
    vaLow := array.get(profilePrices, vaBottomIndex)

//---------------------------------------------------------------------------------//
//                            TRADING SIGNALS                                      //
//---------------------------------------------------------------------------------//

// Volume-based signals
volumeBreakout = volumeRatio > volumeThreshold
volumeConfirmation = volumeRatio > 1.5 and volumeRatio < 3.0
institutionalActivity = institutionalFlow > 0

// Trend-following signals
bullishTrend = isUptrend and macd > macdSignal and rsi > 45 and rsi < 75 and ta.change(cumulativeDelta) > 0
bearishTrend = isDowntrend and macd < macdSignal and rsi < 55 and rsi > 25 and ta.change(cumulativeDelta) < 0

// Volume Profile signals
pocSupport = not na(pocPrice) and close <= pocPrice * 1.02 and close >= pocPrice * 0.98 and isUptrend and volumeRatio > 1.2
vaBreakout = not na(vaHigh) and not na(vaLow) and ((close > vaHigh and isUptrend) or (close < vaLow and isDowntrend))

// Mean reversion signals
oversoldReversal = isRanging and rsi < rsiOversold and volumeRatio > 1.5 and ta.change(cumulativeDelta) > 0
overboughtReversal = isRanging and rsi > rsiOverbought and volumeRatio > 1.5 and ta.change(cumulativeDelta) < 0

// Divergence signals
bullishDivergence = priceMomentum < -0.02 and volumeMomentum > 0.1 and rsi < 40
bearishDivergence = priceMomentum > 0.02 and volumeMomentum < -0.1 and rsi > 60

// Exit signals
profitTake = rsi > 80 or rsi < 20 or volumeRatio < 0.5

//---------------------------------------------------------------------------------//
//                            POSITION SIZING & SIGNALS                           //
//---------------------------------------------------------------------------------//

// Calculate signal strength
longSignalStrength = (bullishTrend ? 3 : 0) + (pocSupport ? 2 : 0) + (oversoldReversal ? 2 : 0) + (bullishDivergence ? 2 : 0) + (volumeBreakout ? 1 : 0) + (institutionalActivity ? 1 : 0)

shortSignalStrength = (bearishTrend ? 3 : 0) + (vaBreakout ? 2 : 0) + (overboughtReversal ? 2 : 0) + (bearishDivergence ? 2 : 0)

// Normalize to position size
maxLongSignal = 11  // Maximum possible long signal strength
maxShortSignal = 9  // Maximum possible short signal strength

targetLongPosition = longSignalStrength / maxLongSignal * maxPositionSize
targetShortPosition = shortSignalStrength / maxShortSignal * maxPositionSize

// Entry conditions
longEntry = targetLongPosition > 0.01 and strategy.position_size == 0
shortEntry = targetShortPosition > 0.01 and strategy.position_size == 0

// Exit conditions
longExit = strategy.position_size > 0 and (profitTake or targetShortPosition > 0.01)
shortExit = strategy.position_size < 0 and (profitTake or targetLongPosition > 0.01)

//---------------------------------------------------------------------------------//
//                            STRATEGY EXECUTION                                   //
//---------------------------------------------------------------------------------//

// Long entries
if longEntry
    strategy.entry("Long", strategy.long, qty=targetLongPosition)

// Short entries  
if shortEntry
    strategy.entry("Short", strategy.short, qty=targetShortPosition)

// Risk management
if strategy.position_size > 0
    stopPrice = strategy.position_avg_price * (1 - stopLossPercent)
    profitPrice = strategy.position_avg_price * (1 + takeProfitPercent)
    strategy.exit("Long Exit", "Long", stop=stopPrice, limit=profitPrice)

if strategy.position_size < 0
    stopPrice = strategy.position_avg_price * (1 + stopLossPercent)
    profitPrice = strategy.position_avg_price * (1 - takeProfitPercent)
    strategy.exit("Short Exit", "Short", stop=stopPrice, limit=profitPrice)

// Force exits on signal reversal
if longExit
    strategy.close("Long", comment="Signal Exit")
if shortExit
    strategy.close("Short", comment="Signal Exit")

//---------------------------------------------------------------------------------//
//                            VISUALIZATION                                        //
//---------------------------------------------------------------------------------//

// Plot trend indicators
plot(sma20, "SMA 20", color=color.blue, linewidth=1)
plot(sma50, "SMA 50", color=color.red, linewidth=2)

// Volume Profile
if showVolumeProfile and not na(pocPrice)
    line.new(bar_index - profileLookback, pocPrice, bar_index, pocPrice, color=color.yellow, width=3, style=line.style_solid, extend=extend.right)
    
    if not na(vaHigh) and not na(vaLow)
        box.new(bar_index - profileLookback, vaLow, bar_index, vaHigh, bgcolor=color.new(color.blue, 90), border_color=color.blue)

// Smart levels
if showSmartLevels and not na(pocPrice)
    // POC support level
    line.new(bar_index - 50, pocPrice * 0.98, bar_index + 10, pocPrice * 0.98, color=color.green, style=line.style_dashed, extend=extend.right)
    line.new(bar_index - 50, pocPrice * 1.02, bar_index + 10, pocPrice * 1.02, color=color.green, style=line.style_dashed, extend=extend.right)

// Signal markers (must be in global scope)
plotshape(showSignals and longEntry, "Long Entry", shape.triangleup, location.belowbar, color=color.green, size=size.normal)
plotshape(showSignals and shortEntry, "Short Entry", shape.triangledown, location.abovebar, color=color.red, size=size.normal)

plotshape(showSignals and bullishDivergence, "Bullish Div", shape.diamond, location.belowbar, color=color.lime, size=size.small)
plotshape(showSignals and bearishDivergence, "Bearish Div", shape.diamond, location.abovebar, color=color.orange, size=size.small)

// Risk management levels
if showRiskLevels and strategy.position_size != 0
    positionPrice = strategy.position_avg_price
    if strategy.position_size > 0
        stopLevel = positionPrice * (1 - stopLossPercent)
        profitLevel = positionPrice * (1 + takeProfitPercent)
        line.new(bar_index, stopLevel, bar_index + 5, stopLevel, color=color.red, style=line.style_solid, width=2)
        line.new(bar_index, profitLevel, bar_index + 5, profitLevel, color=color.green, style=line.style_solid, width=2)
    else
        stopLevel = positionPrice * (1 + stopLossPercent)
        profitLevel = positionPrice * (1 - takeProfitPercent)
        line.new(bar_index, stopLevel, bar_index + 5, stopLevel, color=color.red, style=line.style_solid, width=2)
        line.new(bar_index, profitLevel, bar_index + 5, profitLevel, color=color.green, style=line.style_solid, width=2)

//---------------------------------------------------------------------------------//
//                            PERFORMANCE DASHBOARD                                //
//---------------------------------------------------------------------------------//

if showDashboard and barstate.islast
    var table dashboard = table.new(position.top_right, 3, 10, bgcolor=color.white, border_width=1)
    
    // Performance metrics
    totalTrades = strategy.closedtrades
    winRate = totalTrades > 0 ? strategy.wintrades / totalTrades * 100 : 0
    profitFactor = strategy.grossloss != 0 ? math.abs(strategy.grossprofit / strategy.grossloss) : 0
    maxDD = strategy.max_drawdown
    
    // Current signals
    currentSignal = longSignalStrength > shortSignalStrength ? "LONG" : 
                   shortSignalStrength > longSignalStrength ? "SHORT" : "NEUTRAL"
    signalColor = currentSignal == "LONG" ? color.green : 
                 currentSignal == "SHORT" ? color.red : color.gray
    
    // Market regime
    regime = isUptrend ? "UPTREND" : isDowntrend ? "DOWNTREND" : "RANGING"
    regimeColor = isUptrend ? color.green : isDowntrend ? color.red : color.orange
    
    // Fill dashboard
    table.cell(dashboard, 0, 0, "Strategy Stats", bgcolor=color.blue, text_color=color.white, text_size=size.normal)
    table.cell(dashboard, 1, 0, "", bgcolor=color.blue)
    table.cell(dashboard, 2, 0, "", bgcolor=color.blue)
    
    table.cell(dashboard, 0, 1, "Net Profit", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 1, str.tostring(strategy.netprofit, "$#,###"), text_color=color.black, text_size=size.small)
    table.cell(dashboard, 2, 1, str.tostring(strategy.netprofit / strategy.initial_capital * 100, "#.##") + "%", text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 2, "Total Trades", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 2, str.tostring(totalTrades), text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 3, "Win Rate", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 3, str.tostring(winRate, "#.#") + "%", text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 4, "Profit Factor", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 4, str.tostring(profitFactor, "#.##"), text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 5, "Max Drawdown", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 5, str.tostring(maxDD / strategy.initial_capital * 100, "#.##") + "%", text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 6, "Current Signal", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 6, currentSignal, text_color=signalColor, text_size=size.small)
    
    table.cell(dashboard, 0, 7, "Market Regime", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 7, regime, text_color=regimeColor, text_size=size.small)
    
    table.cell(dashboard, 0, 8, "Volume Ratio", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 8, str.tostring(volumeRatio, "#.##") + "x", text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 9, "RSI", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 9, str.tostring(rsi, "#.#"), text_color=color.black, text_size=size.small)

//---------------------------------------------------------------------------------//
//                            ALERTS                                               //
//---------------------------------------------------------------------------------//

// Entry alerts
alertcondition(longEntry, title="Long Entry Signal", message="Enhanced Volume Strategy: LONG entry signal triggered")
alertcondition(shortEntry, title="Short Entry Signal", message="Enhanced Volume Strategy: SHORT entry signal triggered")

// Volume alerts
alertcondition(volumeBreakout, title="Volume Breakout", message="High volume breakout detected - {{ticker}} volume ratio: " + str.tostring(volumeRatio, "#.##"))
alertcondition(institutionalActivity, title="Institutional Flow", message="Large institutional volume detected - {{ticker}}")

// Divergence alerts
alertcondition(bullishDivergence, title="Bullish Divergence", message="Bullish volume-price divergence detected - {{ticker}}")
alertcondition(bearishDivergence, title="Bearish Divergence", message="Bearish volume-price divergence detected - {{ticker}}")

// Risk management alerts
alertcondition(profitTake, title="Exit Signal", message="Exit signal triggered - consider taking profits - {{ticker}}")

//---------------------------------------------------------------------------------//
//                            PLOTS FOR STUDY MODE                                 //
//---------------------------------------------------------------------------------//

// Volume indicators (for lower panel)
plot(volumeRatio, "Volume Ratio", color=color.blue, linewidth=2, display=display.data_window)
plot(volumeRSI, "Volume RSI", color=color.purple, linewidth=1, display=display.data_window)
hline(rsiOverbought, "RSI Overbought", color=color.red, linestyle=hline.style_dashed)
hline(rsiOversold, "RSI Oversold", color=color.green, linestyle=hline.style_dashed)

// Signal strength
plot(longSignalStrength, "Long Signal Strength", color=color.green, linewidth=2, display=display.data_window)
plot(shortSignalStrength, "Short Signal Strength", color=color.red, linewidth=2, display=display.data_window) 